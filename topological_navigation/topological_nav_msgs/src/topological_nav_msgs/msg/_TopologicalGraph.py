"""autogenerated by genpy from topological_nav_msgs/TopologicalGraph.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import topological_nav_msgs.msg

class TopologicalGraph(genpy.Message):
  _md5sum = "a0ab3936a4c52a67e3590fae99c61eb4"
  _type = "topological_nav_msgs/TopologicalGraph"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# A 2d topological map consists of a set of local occupancy grids together with
# the transformations between coordinate frames of overlapping grids.  This ROS
# message represents the structure of the topological map, i.e., all the 
# information except the grids themselves.  You can get individual grids by
# calling the GetLocalGrid service on the mapper.

TopologicalMapNode[] nodes
TopologicalMapEdge[] edges
================================================================================
MSG: topological_nav_msgs/TopologicalMapNode
# Info stored with a node in a 2d topological map

# Id of this node in the topological map
uint32 id

# Dimensions of local grid.  The local grid covers the rectangle between
# (0,0) and (x_size, y_size) in the grid's frame
float32 x_size
float32 y_size

# Resolution of the local occupancy grid
float32 resolution


================================================================================
MSG: topological_nav_msgs/TopologicalMapEdge
# Info stored with an edge in 2d topological map

# Id of this edge in the topological map
uint32 id

# Id of the source node
uint32 src

# Id of the destination node
uint32 dest

# Pose of origin of destination node's coordinate frame
# represented in the source node's coordinate frame
geometry_msgs/Pose offset

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['nodes','edges']
  _slot_types = ['topological_nav_msgs/TopologicalMapNode[]','topological_nav_msgs/TopologicalMapEdge[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       nodes,edges

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TopologicalGraph, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.nodes is None:
        self.nodes = []
      if self.edges is None:
        self.edges = []
    else:
      self.nodes = []
      self.edges = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.nodes)
      buff.write(_struct_I.pack(length))
      for val1 in self.nodes:
        _x = val1
        buff.write(_struct_I3f.pack(_x.id, _x.x_size, _x.y_size, _x.resolution))
      length = len(self.edges)
      buff.write(_struct_I.pack(length))
      for val1 in self.edges:
        _x = val1
        buff.write(_struct_3I.pack(_x.id, _x.src, _x.dest))
        _v1 = val1.offset
        _v2 = _v1.position
        _x = _v2
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v3 = _v1.orientation
        _x = _v3
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.nodes is None:
        self.nodes = None
      if self.edges is None:
        self.edges = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.nodes = []
      for i in range(0, length):
        val1 = topological_nav_msgs.msg.TopologicalMapNode()
        _x = val1
        start = end
        end += 16
        (_x.id, _x.x_size, _x.y_size, _x.resolution,) = _struct_I3f.unpack(str[start:end])
        self.nodes.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.edges = []
      for i in range(0, length):
        val1 = topological_nav_msgs.msg.TopologicalMapEdge()
        _x = val1
        start = end
        end += 12
        (_x.id, _x.src, _x.dest,) = _struct_3I.unpack(str[start:end])
        _v4 = val1.offset
        _v5 = _v4.position
        _x = _v5
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v6 = _v4.orientation
        _x = _v6
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.edges.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.nodes)
      buff.write(_struct_I.pack(length))
      for val1 in self.nodes:
        _x = val1
        buff.write(_struct_I3f.pack(_x.id, _x.x_size, _x.y_size, _x.resolution))
      length = len(self.edges)
      buff.write(_struct_I.pack(length))
      for val1 in self.edges:
        _x = val1
        buff.write(_struct_3I.pack(_x.id, _x.src, _x.dest))
        _v7 = val1.offset
        _v8 = _v7.position
        _x = _v8
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v9 = _v7.orientation
        _x = _v9
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.nodes is None:
        self.nodes = None
      if self.edges is None:
        self.edges = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.nodes = []
      for i in range(0, length):
        val1 = topological_nav_msgs.msg.TopologicalMapNode()
        _x = val1
        start = end
        end += 16
        (_x.id, _x.x_size, _x.y_size, _x.resolution,) = _struct_I3f.unpack(str[start:end])
        self.nodes.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.edges = []
      for i in range(0, length):
        val1 = topological_nav_msgs.msg.TopologicalMapEdge()
        _x = val1
        start = end
        end += 12
        (_x.id, _x.src, _x.dest,) = _struct_3I.unpack(str[start:end])
        _v10 = val1.offset
        _v11 = _v10.position
        _x = _v11
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v12 = _v10.orientation
        _x = _v12
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.edges.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4d = struct.Struct("<4d")
_struct_3I = struct.Struct("<3I")
_struct_I3f = struct.Struct("<I3f")
_struct_3d = struct.Struct("<3d")
