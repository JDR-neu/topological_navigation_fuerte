"""autogenerated by genpy from topological_nav_msgs/RoadmapNode.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class RoadmapNode(genpy.Message):
  _md5sum = "831d32363c9823932a1d6a8c0d277d9f"
  _type = "topological_nav_msgs/RoadmapNode"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Info stored with a waypoint node in the topological roadmap

# Id of this node in the roadmap
uint32 id

# Id of the topological map grid wrt which this waypoint position is defined
uint32 grid

# Relative position in the grid frame
geometry_msgs/Point position
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

"""
  __slots__ = ['id','grid','position']
  _slot_types = ['uint32','uint32','geometry_msgs/Point']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,grid,position

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RoadmapNode, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.grid is None:
        self.grid = 0
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
    else:
      self.id = 0
      self.grid = 0
      self.position = geometry_msgs.msg.Point()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2I3d.pack(_x.id, _x.grid, _x.position.x, _x.position.y, _x.position.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.id, _x.grid, _x.position.x, _x.position.y, _x.position.z,) = _struct_2I3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2I3d.pack(_x.id, _x.grid, _x.position.x, _x.position.y, _x.position.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.id, _x.grid, _x.position.x, _x.position.y, _x.position.z,) = _struct_2I3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2I3d = struct.Struct("<2I3d")
