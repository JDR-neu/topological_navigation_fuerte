"""autogenerated by genpy from laser_slam/RecentScanTimeRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class RecentScanTimeRequest(genpy.Message):
  _md5sum = "636acdcf9cff2656f32f60d631b1e915"
  _type = "laser_slam/RecentScanTimeRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """time t1
time t2

"""
  __slots__ = ['t1','t2']
  _slot_types = ['time','time']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       t1,t2

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RecentScanTimeRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.t1 is None:
        self.t1 = genpy.Time()
      if self.t2 is None:
        self.t2 = genpy.Time()
    else:
      self.t1 = genpy.Time()
      self.t2 = genpy.Time()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4I.pack(_x.t1.secs, _x.t1.nsecs, _x.t2.secs, _x.t2.nsecs))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.t1 is None:
        self.t1 = genpy.Time()
      if self.t2 is None:
        self.t2 = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.t1.secs, _x.t1.nsecs, _x.t2.secs, _x.t2.nsecs,) = _struct_4I.unpack(str[start:end])
      self.t1.canon()
      self.t2.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4I.pack(_x.t1.secs, _x.t1.nsecs, _x.t2.secs, _x.t2.nsecs))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.t1 is None:
        self.t1 = genpy.Time()
      if self.t2 is None:
        self.t2 = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.t1.secs, _x.t1.nsecs, _x.t2.secs, _x.t2.nsecs,) = _struct_4I.unpack(str[start:end])
      self.t1.canon()
      self.t2.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4I = struct.Struct("<4I")
"""autogenerated by genpy from laser_slam/RecentScanTimeResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class RecentScanTimeResponse(genpy.Message):
  _md5sum = "a0cf51c4871882ea146d55ce23ae4273"
  _type = "laser_slam/RecentScanTimeResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool found
time t

"""
  __slots__ = ['found','t']
  _slot_types = ['bool','time']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       found,t

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RecentScanTimeResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.found is None:
        self.found = False
      if self.t is None:
        self.t = genpy.Time()
    else:
      self.found = False
      self.t = genpy.Time()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_B2I.pack(_x.found, _x.t.secs, _x.t.nsecs))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.t is None:
        self.t = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 9
      (_x.found, _x.t.secs, _x.t.nsecs,) = _struct_B2I.unpack(str[start:end])
      self.found = bool(self.found)
      self.t.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_B2I.pack(_x.found, _x.t.secs, _x.t.nsecs))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.t is None:
        self.t = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 9
      (_x.found, _x.t.secs, _x.t.nsecs,) = _struct_B2I.unpack(str[start:end])
      self.found = bool(self.found)
      self.t.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B2I = struct.Struct("<B2I")
class RecentScanTime(object):
  _type          = 'laser_slam/RecentScanTime'
  _md5sum = 'cdd594f6cb6fa1a1b9db91fa9de1847b'
  _request_class  = RecentScanTimeRequest
  _response_class = RecentScanTimeResponse
